// <auto-generated />
using MantiScanServices.DataProvider;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage;
using Microsoft.EntityFrameworkCore.Storage.Internal;
using System;

namespace MantiScanServices.Migrations
{
    [DbContext(typeof(MantiDbContext))]
    partial class MantiDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("public")
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn)
                .HasAnnotation("ProductVersion", "2.0.3-rtm-10026");

            modelBuilder.Entity("MantiScanServices.Model.Incidents.Incident", b =>
                {
                    b.Property<int>("IncidentId")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("DateCreated");

                    b.Property<DateTime>("DateModified");

                    b.Property<int>("IncidentCauseId");

                    b.Property<DateTime>("IncidentDate");

                    b.Property<string>("IncidentName");

                    b.Property<string>("Notes");

                    b.Property<int>("OrganizationId");

                    b.Property<string>("OtherDamage");

                    b.Property<string>("TowerId");

                    b.Property<string>("UserId");

                    b.HasKey("IncidentId");

                    b.HasIndex("OrganizationId");

                    b.HasIndex("UserId");

                    b.ToTable("Incident");
                });

            modelBuilder.Entity("MantiScanServices.Model.Master.Tower", b =>
                {
                    b.Property<int>("TowerId")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("DateCreated");

                    b.Property<DateTime>("DateModified");

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("TowerName");

                    b.Property<string>("UserId");

                    b.HasKey("TowerId");

                    b.HasIndex("UserId");

                    b.ToTable("Tower");
                });

            modelBuilder.Entity("MantiScanServices.Model.Modules.Module", b =>
                {
                    b.Property<int>("ModuleId")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("DateCreated");

                    b.Property<DateTime>("DateModified");

                    b.Property<bool>("IsActive");

                    b.Property<string>("ModuleName");

                    b.HasKey("ModuleId");

                    b.ToTable("Module");
                });

            modelBuilder.Entity("MantiScanServices.Model.OilSpillReport.NotificationAgency", b =>
                {
                    b.Property<int>("NotificationAgencyId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Agency");

                    b.Property<DateTime>("DateCreated");

                    b.Property<DateTime>("DateModified");

                    b.Property<string>("IncidentNo");

                    b.Property<int>("OilSpillReportId");

                    b.Property<string>("ReportedBy");

                    b.Property<string>("ReportedTo");

                    b.Property<DateTime>("TimeDate");

                    b.HasKey("NotificationAgencyId");

                    b.HasIndex("OilSpillReportId");

                    b.ToTable("NotificationAgency");
                });

            modelBuilder.Entity("MantiScanServices.Model.OilSpillReport.NotificationCompany", b =>
                {
                    b.Property<int>("NotificationCompanyId")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("DateCreated");

                    b.Property<DateTime>("DateModified");

                    b.Property<int>("OilSpillReportId");

                    b.Property<string>("ReportedBy");

                    b.Property<string>("ReportedToName");

                    b.Property<string>("ReportedToPosition");

                    b.Property<DateTime>("TimeDate");

                    b.HasKey("NotificationCompanyId");

                    b.HasIndex("OilSpillReportId");

                    b.ToTable("NotificationCompany");
                });

            modelBuilder.Entity("MantiScanServices.Model.OilSpillReport.OilSpillReport", b =>
                {
                    b.Property<int>("OilSpillReportId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("APIgravity");

                    b.Property<string>("ActionNotes");

                    b.Property<bool>("ActualSpill");

                    b.Property<string>("Agent");

                    b.Property<int>("AirTemp");

                    b.Property<string>("AreaBlock");

                    b.Property<double>("BarelyVisible");

                    b.Property<double>("BrigthlyCovered");

                    b.Property<string>("CallSign");

                    b.Property<string>("CaptainAddress");

                    b.Property<string>("CaptainName");

                    b.Property<string>("CaptainPhone");

                    b.Property<string>("CardNo");

                    b.Property<double>("Ceiling");

                    b.Property<string>("CeilingUnitId");

                    b.Property<double>("CurrentDirection");

                    b.Property<string>("CurrentVelocity");

                    b.Property<int>("Damage");

                    b.Property<double>("Dark");

                    b.Property<DateTime>("DateCreated");

                    b.Property<DateTime>("DateModified");

                    b.Property<string>("Discription");

                    b.Property<int>("Distance");

                    b.Property<bool>("Drill");

                    b.Property<DateTime>("DtIncidentOccurred");

                    b.Property<DateTime>("DtIncidentQiIc");

                    b.Property<double>("Dull");

                    b.Property<int>("Evacuated");

                    b.Property<string>("Facility");

                    b.Property<int>("Fatalities");

                    b.Property<string>("Flag");

                    b.Property<string>("FormPreparedBy");

                    b.Property<int>("Injuries");

                    b.Property<string>("Latitude");

                    b.Property<int>("Length");

                    b.Property<string>("LengthUnitId");

                    b.Property<string>("Longitude");

                    b.Property<string>("Material");

                    b.Property<string>("NRC");

                    b.Property<string>("Name");

                    b.Property<string>("NearestCity");

                    b.Property<string>("Ocsg");

                    b.Property<int>("OrganizationId");

                    b.Property<double>("PercentageOfSlick");

                    b.Property<int>("PlateFormId");

                    b.Property<string>("Position");

                    b.Property<string>("QtyUnitId");

                    b.Property<int>("Quanity");

                    b.Property<string>("Remarks");

                    b.Property<string>("ReportName");

                    b.Property<string>("ReportingCompany");

                    b.Property<string>("ReportingPhone");

                    b.Property<double>("Seas");

                    b.Property<string>("SeasUnitId");

                    b.Property<double>("Silvery");

                    b.Property<double>("SlightlyColored");

                    b.Property<double>("SourceContinous");

                    b.Property<string>("SourceContinousUnitId");

                    b.Property<DateTime>("SourceSecuredAt");

                    b.Property<string>("SuspectedCompany");

                    b.Property<string>("SuspectedPhone");

                    b.Property<string>("UserId");

                    b.Property<string>("VesselName");

                    b.Property<string>("VesselOwner");

                    b.Property<double>("Visibility");

                    b.Property<string>("VisibilityUnitId");

                    b.Property<int>("WaterTemp");

                    b.Property<int>("Width");

                    b.Property<string>("WidthUnitId");

                    b.Property<double>("WindDirection");

                    b.Property<string>("WindVelocity");

                    b.HasKey("OilSpillReportId");

                    b.HasIndex("OrganizationId");

                    b.HasIndex("PlateFormId");

                    b.HasIndex("UserId");

                    b.ToTable("OilSpillReport");
                });

            modelBuilder.Entity("MantiScanServices.Model.Organizations.Organization", b =>
                {
                    b.Property<int>("OrganizationId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Address");

                    b.Property<string>("ContactEmail");

                    b.Property<string>("ContactPhone");

                    b.Property<DateTime>("DateCreated");

                    b.Property<DateTime>("DateModified");

                    b.Property<string>("LogoFile");

                    b.Property<string>("Name");

                    b.Property<string>("Website");

                    b.HasKey("OrganizationId");

                    b.ToTable("Organization");
                });

            modelBuilder.Entity("MantiScanServices.Model.Plateforms.PlateForm", b =>
                {
                    b.Property<int>("PlateFormId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("AreaCode");

                    b.Property<string>("AuthorityNumber");

                    b.Property<string>("AuthorityStatus");

                    b.Property<string>("AuthorityType");

                    b.Property<string>("BlockNumber");

                    b.Property<string>("BusAscName");

                    b.Property<string>("Field");

                    b.Property<DateTime>("InstallDate");

                    b.Property<string>("Latitude");

                    b.Property<string>("Longitude");

                    b.Property<int>("OrganizationId");

                    b.Property<string>("StructureName");

                    b.Property<string>("StructureNumber");

                    b.Property<string>("StructureTypeCode");

                    b.Property<string>("UserId");

                    b.HasKey("PlateFormId");

                    b.HasIndex("OrganizationId");

                    b.HasIndex("UserId");

                    b.ToTable("PlateForm");
                });

            modelBuilder.Entity("MantiScanServices.Model.RolePrivilege.RolePrivilege", b =>
                {
                    b.Property<int>("RolePrivilegeId")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("PrivilegeId");

                    b.Property<int>("RoleId");

                    b.HasKey("RolePrivilegeId");

                    b.ToTable("RolePrivilege");
                });

            modelBuilder.Entity("MantiScanServices.Model.Roles.Role", b =>
                {
                    b.Property<int>("RoleId")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("DateCreated");

                    b.Property<DateTime>("DateModified");

                    b.Property<bool>("IsActive");

                    b.Property<string>("RoleName");

                    b.HasKey("RoleId");

                    b.ToTable("MantiScanRole");
                });

            modelBuilder.Entity("MantiScanServices.Model.Roles.RoleDetail", b =>
                {
                    b.Property<int>("RoleDetailId")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("Add");

                    b.Property<DateTime>("DateCreated");

                    b.Property<DateTime>("DateModified");

                    b.Property<bool>("Delete");

                    b.Property<bool>("Edit");

                    b.Property<bool>("IsActive");

                    b.Property<int>("ModuleId");

                    b.Property<int>("RoleId");

                    b.Property<bool>("View");

                    b.HasKey("RoleDetailId");

                    b.HasIndex("ModuleId");

                    b.HasIndex("RoleId");

                    b.ToTable("RoleDetail");
                });

            modelBuilder.Entity("MantiScanServices.Model.Users.User", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("AdminId");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<DateTime>("DateCreated");

                    b.Property<DateTime>("DateModified");

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<string>("FirstName");

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime>("LastLogin");

                    b.Property<string>("LastName");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<int>("OrganizationId");

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex");

                    b.HasIndex("OrganizationId");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("MantiScanServices.Model.Users.UserRoleDetail", b =>
                {
                    b.Property<int>("UserRoleDetailId")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("DateCreated");

                    b.Property<DateTime>("DateModified");

                    b.Property<bool>("IsActive");

                    b.Property<int>("RoleId");

                    b.Property<string>("UserId");

                    b.HasKey("UserRoleDetailId");

                    b.HasIndex("RoleId");

                    b.HasIndex("UserId");

                    b.ToTable("UserRoleDetail");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("RoleId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider");

                    b.Property<string>("ProviderKey");

                    b.Property<string>("ProviderDisplayName");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("LoginProvider");

                    b.Property<string>("Name");

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("MantiScanServices.Model.Incidents.Incident", b =>
                {
                    b.HasOne("MantiScanServices.Model.Organizations.Organization", "Organization")
                        .WithMany("Incidents")
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("MantiScanServices.Model.Users.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("MantiScanServices.Model.Master.Tower", b =>
                {
                    b.HasOne("MantiScanServices.Model.Users.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("MantiScanServices.Model.OilSpillReport.NotificationAgency", b =>
                {
                    b.HasOne("MantiScanServices.Model.OilSpillReport.OilSpillReport", "OilSpillReport")
                        .WithMany("NotificationAgencys")
                        .HasForeignKey("OilSpillReportId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("MantiScanServices.Model.OilSpillReport.NotificationCompany", b =>
                {
                    b.HasOne("MantiScanServices.Model.OilSpillReport.OilSpillReport", "OilSpillReport")
                        .WithMany("NotificationCompanys")
                        .HasForeignKey("OilSpillReportId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("MantiScanServices.Model.OilSpillReport.OilSpillReport", b =>
                {
                    b.HasOne("MantiScanServices.Model.Organizations.Organization", "Organization")
                        .WithMany()
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("MantiScanServices.Model.Plateforms.PlateForm", "Plateform")
                        .WithMany()
                        .HasForeignKey("PlateFormId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("MantiScanServices.Model.Users.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("MantiScanServices.Model.Plateforms.PlateForm", b =>
                {
                    b.HasOne("MantiScanServices.Model.Organizations.Organization", "Organization")
                        .WithMany()
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("MantiScanServices.Model.Users.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("MantiScanServices.Model.Roles.RoleDetail", b =>
                {
                    b.HasOne("MantiScanServices.Model.Modules.Module", "Module")
                        .WithMany()
                        .HasForeignKey("ModuleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("MantiScanServices.Model.Roles.Role", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("MantiScanServices.Model.Users.User", b =>
                {
                    b.HasOne("MantiScanServices.Model.Organizations.Organization", "Organization")
                        .WithMany("Users")
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("MantiScanServices.Model.Users.UserRoleDetail", b =>
                {
                    b.HasOne("MantiScanServices.Model.Roles.Role", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("MantiScanServices.Model.Users.User", "User")
                        .WithMany("Roles")
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("MantiScanServices.Model.Users.User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("MantiScanServices.Model.Users.User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("MantiScanServices.Model.Users.User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("MantiScanServices.Model.Users.User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
